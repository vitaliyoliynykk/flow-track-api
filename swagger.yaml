paths:
  /auth/register:
    post:
      tags:
        - auth
      requestBody:
        description: Register a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: User has been registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /auth/login:
    post:
      tags:
        - auth
      requestBody:
        description: Log in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Log in success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
/tasks:
  get:
    tags:
      - tasks
    responses:
      "200":
        description: Retrieves a list of user tasks
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TasksResponse"
  put:
    tags:
      - tasks
    requestBody:
      description: Create a new task
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"

/user/update-user-profile-picture-url:
  post:
    tags:
      - user
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              profilePictureUrl:
                type: string
                format: url
/settings:
  get:
    tags:
      - settings
    responses:
      "200":
        description: Log in success
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsResponse"
  put:
    tags:
      - settings
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SettingsResponse"
    responses:
      "200":
        description: Log in success
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsResponse"

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserResponse:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        id:
          type: string
          example: 64ad5d8c12e3e36a7e48f5a9
        profilePictureUrl:
          type: string
          format: uri
          example: https://example.com/avatar.png
        name:
          type: string
          example: John Doe
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR...
        user:
          $ref: "#/components/schemas/UserResponse"
    TaskResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        title:
          type: string
        status:
          type: string
          example: new
        sessions_goal:
          type: integer
        sessions_completed:
          type: integer
        end_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    TasksResponse:
      type: array
      properties:
        $ref: "#/components/schemas/TaskResponse"
    SettingsResponse:
      type: object
      properties:
        pushNotificationsEnabled:
          type: boolean
        pomodoroConfiguration:
          type: array
          items:
            $ref: "#/components/schemas/PomodoroBlock"
    Task:
      type: "object"
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        status:
          type: string
        sessionsGoal:
          type: number
        endDate:
          type: string
          format: date-time
    PomodoroBlock:
      type: object
      properties:
        duration:
          type: integer
        type:
          type: string
